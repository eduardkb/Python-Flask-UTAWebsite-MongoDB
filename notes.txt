Passwords on mongodb
    eduard@uta.edu | eduard1234
    laysa@uta.edu  | laysa1234
    polly@uta.edu  | polly1234
===================================================

1 - create a app folder (any name)
    app folder contains all application files
    - inside app folder create __init__.py
    - fodders static andtemplates
2 - create config.py on root folder
3 - transition routing to application/routes.py file.

MONGODB
    Install: https://www.linuxcapable.com/pt/how-to-install-mongodb-5-0-on-debian-11-bullseye/
    Steps:
        $ sudo apt install dirmngr gnupg apt-transport-https software-properties-common ca-certificates curl -y
        sudo wget -O- https://www.mongodb.org/static/pgp/server-5.0.asc | gpg --dearmor | sudo tee /usr/share/keyrings/mongodb.gpg
        echo 'deb [signed-by=/usr/share/keyrings/mongodb.gpg] http://repo.mongodb.org/apt/debian buster/mongodb-org/5.0 main' | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
        sudo apt-get update
        sudo apt install mongodb-org
        sudo systemctl enable mongod --now
        mongo --eval 'db.runCommand({ connectionStatus: 1 })'
        sudo systemctl enable mongod
        systemctl status mongod     

    enable security and create new user on mongo db following
    instructions on site above        
        user: "mongouser"
        pwd: "m0ng0U$er"
    to test connection
        mongo --port 27017 --authenticationDatabase "admin" -u "mongouser" -p
    to quit
        quit()

    Install mongo for flask
        $ pip install flask-mongoengine
        redo the requirements.txt file
            $ pip freeze > requirements.txt

    Create database
        login with user above if security on
            $ mongo --port 27017 --authenticationDatabase "admin" -u "mongouser" -p
        to show databases
            $ show dbs
        to create new database (or enter existing one)
            $ use UTA_Enrollment
        verify in which db you are in
            $ db
        create collection
            $ db.createCollection("user")
            $ show collections
        Insert into collection user (creates collection if it does not exist)
            $ db.user.insert({name: "jack", designation: "Manager", age:25})
            db.course.insert({courseID: "111", title: "Python 101", description: "Learn the basics of Python", credits: 15, term: "summer 2023"})
            db.course.insert({courseID: "222", title: "PHP", description: "Learn PHP", credits: 10, term: "summer 2023"})
            db.course.insert({courseID: "333", title: "Python 102", description: "More advanced Python", credits: 35, term: "Winter 2022"})
            db.course.insert({courseID: "444", title: "HTML+CSS 101", description: "Internet Basics", credits: 5, term: "summer 2021"})
            db.course.insert({courseID: "555", title: "Java 103", description: "Very advanced Java course", credits: 55, term: "summer 2025"})
            db.course.insert({courseID: "666", title: "GO", description: "Initiate your journey with GO", credits: 30, term: "Fall 2023"})


        change entry
            db.course.updateOne({courseID: "444"}, {$set:{courseID: "444", title: "FE with HTML & CSS", description: "Learn Internet FE Basics", credits: 10, term: "summer 2021"}})\
            db.course.updateOne({courseID: "666"}, {$set:{description: "Go Language"}})

        delete one
            db.course.deleteOne({courseID: "666"})

        select from collection
            $ db.user.find()
        drop collection 
            $ db.ress.drop()

    Configure DB for use on flask on files 
        config.py
        __init__.py

    Export data from mongoDB collections
        mongoexport --jsonArray --db UTA_Enrollment --collection enrollment --out enrollment.json

    Import data to mongodb
        mongoimport --jsonArray --db UTA_Enrollment --collection user --file users.json
        mongoimport --jsonArray --db UTA_Enrollment --collection course --file course.json
        mongoimport --jsonArray --db UTA_Enrollment --collection enrollment --file enrollment.json



Forms generatin
    with WTForms extension

    INSTALL
        pip install Flask-WTF

    CREATE FORMS
        created on file forms.py
        sent to html page on routes.py
        displayed on login.html

Security features
    with flask-security extension
        available for Flask-SQLAlchemy, Flask-MongoEngine, Flask-peewee, and PonyORM
    provides
        session authentication
        password hashing
        user registration
        others

    INSTALL
        pip install flask-security

Implement session authentication
    1 - make a secure key for SECRET_KEY on file config.py
        SECRET can be generated by running: python3 -c "import os; print(os.urandom(16))"
    2 - on routes.py import session from flask
    3 - manage session with session variable on routes.py and needed .html files


Develop restAPI
    python package to help on restAPI development
        pip install flask-restplus 

    site and app to test RestAPI's:
        https://www.postman.com/

    